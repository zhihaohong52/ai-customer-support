{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/GitHub/ai-customer-support/frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport 'dotenv/config'; // Load environment variables from .env\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const messageEndRef = useRef(null);\n\n  // Scroll to the bottom when new messages arrive\n  const scrollToBottom = () => {\n    var _messageEndRef$curren;\n    (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setLoading(true);\n    setInput('');\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n      const response = await fetch(`${API_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: input\n        })\n      });\n      const data = await response.json();\n      const aiMessage = {\n        text: data.message,\n        sender: 'ai',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      const errorMessage = {\n        text: 'Error connecting to the AI service.',\n        sender: 'error',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-gray-100 text-sm\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-4 overflow-y-auto\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'} mb-4`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `max-w-xs p-3 rounded-lg ${msg.sender === 'user' ? 'bg-blue-500 text-white' : msg.sender === 'ai' ? 'bg-gray-300 text-black' : 'bg-red-500 text-white'} text-left`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block text-xs text-right\",\n            children: msg.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messageEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-white shadow-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(TextareaAutosize, {\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type your message...\",\n          className: \"flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-black text-sm\",\n          rows: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: loading || !input.trim(),\n          className: `px-4 py-2 rounded-lg text-white text-sm ${loading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'}`,\n          children: loading ? 'Sending...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"wrcy9bXH74Xljfvll4rXKXTOMZ4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TextareaAutosize","jsxDEV","_jsxDEV","Chatbot","_s","input","setInput","messages","setMessages","loading","setLoading","messageEndRef","scrollToBottom","_messageEndRef$curren","current","scrollIntoView","behavior","sendMessage","trim","userMessage","text","sender","timestamp","Date","toLocaleTimeString","prev","API_URL","process","env","REACT_APP_API_URL","response","fetch","method","headers","body","JSON","stringify","prompt","data","json","aiMessage","message","error","console","errorMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","e","target","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/james/Documents/GitHub/ai-customer-support/frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport 'dotenv/config';             // Load environment variables from .env\n\nconst Chatbot = () => {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const messageEndRef = useRef(null);\n\n  // Scroll to the bottom when new messages arrive\n  const scrollToBottom = () => {\n    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user', timestamp: new Date().toLocaleTimeString() };\n    setMessages((prev) => [...prev, userMessage]);\n    setLoading(true);\n    setInput('');\n\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n      const response = await fetch(`${API_URL}/api/chat`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: input }),\n      });\n\n      const data = await response.json();\n      const aiMessage = { text: data.message, sender: 'ai', timestamp: new Date().toLocaleTimeString() };\n      setMessages((prev) => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      const errorMessage = { text: 'Error connecting to the AI service.', sender: 'error', timestamp: new Date().toLocaleTimeString() };\n      setMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-100 text-sm\">\n      {/* Chat messages container */}\n      <div className=\"flex-1 p-4 overflow-y-auto\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'} mb-4`}>\n            <div className={`max-w-xs p-3 rounded-lg ${msg.sender === 'user' ? 'bg-blue-500 text-white' : msg.sender === 'ai' ? 'bg-gray-300 text-black' : 'bg-red-500 text-white'} text-left`}>\n              <p>{msg.text}</p>\n              <span className=\"block text-xs text-right\">{msg.timestamp}</span> {/* Add timestamp */}\n            </div>\n          </div>\n        ))}\n        <div ref={messageEndRef} />\n      </div>\n\n      {/* Input area */}\n      <div className=\"p-4 bg-white shadow-md\">\n        <div className=\"flex items-center space-x-2\">\n          <TextareaAutosize\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n            className=\"flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-black text-sm\"\n            rows=\"2\"\n          />\n          <button\n            onClick={sendMessage}\n            disabled={loading || !input.trim()}\n            className={`px-4 py-2 rounded-lg text-white text-sm ${loading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'}`}\n          >\n            {loading ? 'Sending...' : 'Send'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
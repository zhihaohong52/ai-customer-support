{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/GitHub/ai-customer-support/src/Chatbot.js\",\n  _s = $RefreshSig$();\n// src/Chatbot.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; // For making API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState(\"\"); // Store user input\n  const [response, setResponse] = useState(\"\"); // Store AI response\n  const [loading, setLoading] = useState(false); // For loading state\n\n  // Function to handle sending the user message and fetching AI response\n  const sendMessage = async () => {\n    if (!input.trim()) return; // Prevent sending empty messages\n\n    setLoading(true); // Set loading to true during API call\n    try {\n      // Replace with your LLM API (e.g., OpenAI's API)\n      const result = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n        model: \"gpt-3.5-turbo\",\n        // Model name (GPT-3.5 or GPT-4)\n        messages: [{\n          role: \"user\",\n          content: input\n        }]\n      }, {\n        headers: {\n          Authorization: `Bearer YOUR_OPENAI_API_KEY` // Your API key\n        }\n      });\n\n      // Update the response with the AI-generated message\n      setResponse(result.data.choices[0].message.content);\n    } catch (error) {\n      console.error(\"Error fetching AI response:\", error);\n      setResponse(\"There was an error connecting to the AI service.\");\n    }\n    setLoading(false); // Turn off loading state after API call\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Ask me anything...\",\n        rows: \"3\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        className: \"send-button\",\n        children: loading ? \"Sending...\" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-response\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"AI Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"IiR1omdg9+dD+OENer1brv9OaRI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","input","setInput","response","setResponse","loading","setLoading","sendMessage","trim","result","post","model","messages","role","content","headers","Authorization","data","choices","message","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/james/Documents/GitHub/ai-customer-support/src/Chatbot.js"],"sourcesContent":["// src/Chatbot.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; // For making API calls\n\nconst Chatbot = () => {\n  const [input, setInput] = useState(\"\"); // Store user input\n  const [response, setResponse] = useState(\"\"); // Store AI response\n  const [loading, setLoading] = useState(false); // For loading state\n\n  // Function to handle sending the user message and fetching AI response\n  const sendMessage = async () => {\n    if (!input.trim()) return; // Prevent sending empty messages\n\n    setLoading(true); // Set loading to true during API call\n    try {\n      // Replace with your LLM API (e.g., OpenAI's API)\n      const result = await axios.post(\n        \"https://api.openai.com/v1/chat/completions\",\n        {\n          model: \"gpt-3.5-turbo\", // Model name (GPT-3.5 or GPT-4)\n          messages: [{ role: \"user\", content: input }],\n        },\n        {\n          headers: {\n            Authorization: `Bearer YOUR_OPENAI_API_KEY`, // Your API key\n          },\n        }\n      );\n\n      // Update the response with the AI-generated message\n      setResponse(result.data.choices[0].message.content);\n    } catch (error) {\n      console.error(\"Error fetching AI response:\", error);\n      setResponse(\"There was an error connecting to the AI service.\");\n    }\n    setLoading(false); // Turn off loading state after API call\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <h2>AI Chatbot</h2>\n      <div className=\"chatbot-input\">\n        <textarea\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Ask me anything...\"\n          rows=\"3\"\n          className=\"input-box\"\n        />\n        <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n          {loading ? \"Sending...\" : \"Send\"}\n        </button>\n      </div>\n      {response && (\n        <div className=\"chatbot-response\">\n          <strong>AI Response:</strong>\n          <p>{response}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
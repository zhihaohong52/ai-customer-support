{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/GitHub/ai-customer-support/frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\n// frontend/src/Chatbot.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css'; // Import chat-ui styles\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const messageEndRef = useRef(null);\n\n  // Scroll to the bottom when new messages arrive\n  const scrollToBottom = () => {\n    var _messageEndRef$curren;\n    (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      timestamp: new Date().toLocaleTimeString(),\n      profilePicture: user.photoURL || 'https://via.placeholder.com/40' // Use user profile picture or a placeholder\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setLoading(true);\n    setInput('');\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\n      // Create the conversation context by combining all previous messages\n      const conversationContext = messages.map(msg => `${msg.sender}: ${msg.text}`).join('\\n');\n      const response = await fetch(`${API_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: input,\n          context: conversationContext\n        })\n      });\n      const data = await response.json();\n      const aiMessage = {\n        text: data.message,\n        sender: 'ai',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      const errorMessage = {\n        text: 'Error connecting to the AI service.',\n        sender: 'error',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(MainContainer, {\n      responsive: true,\n      style: {\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          typingIndicator: loading ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n            content: \"AI is typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 51\n          }, this) : null,\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n            model: {\n              message: msg.text,\n              sentTime: msg.timestamp,\n              sender: msg.sender === 'user' ? 'You' : 'AI',\n              direction: msg.sender === 'user' ? 'outgoing' : 'incoming',\n              position: 'normal'\n            },\n            avatarPosition: msg.sender === 'user' ? 'trailing' : 'leading' // Position avatar to the right for user and left for AI\n            ,\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              src: msg.profilePicture,\n              name: msg.sender === 'user' ? 'You' : 'AI',\n              size: \"40\" // Set avatar size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messageEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          placeholder: \"Type your message here...\",\n          value: input,\n          onChange: value => setInput(value),\n          onSend: sendMessage,\n          attachButton: false,\n          sendButton: !loading // Disable send button when loading\n          ,\n          disabled: loading // Disable input when loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"wrcy9bXH74Xljfvll4rXKXTOMZ4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","Chatbot","_s","input","setInput","messages","setMessages","loading","setLoading","messageEndRef","scrollToBottom","_messageEndRef$curren","current","scrollIntoView","behavior","sendMessage","trim","userMessage","text","sender","timestamp","Date","toLocaleTimeString","profilePicture","user","photoURL","prev","API_URL","process","env","REACT_APP_API_URL","conversationContext","map","msg","join","response","fetch","method","headers","body","JSON","stringify","prompt","context","data","json","aiMessage","message","error","console","errorMessage","className","children","responsive","style","height","typingIndicator","content","fileName","_jsxFileName","lineNumber","columnNumber","index","model","sentTime","direction","position","avatarPosition","Avatar","src","name","size","ref","placeholder","value","onChange","onSend","attachButton","sendButton","disabled","_c","$RefreshReg$"],"sources":["/Users/james/Documents/GitHub/ai-customer-support/frontend/src/Chatbot.js"],"sourcesContent":["// frontend/src/Chatbot.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';  // Import chat-ui styles\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  TypingIndicator\n} from '@chatscope/chat-ui-kit-react';\n\nconst Chatbot = () => {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const messageEndRef = useRef(null);\n\n  // Scroll to the bottom when new messages arrive\n  const scrollToBottom = () => {\n    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      timestamp: new Date().toLocaleTimeString(),\n      profilePicture: user.photoURL || 'https://via.placeholder.com/40', // Use user profile picture or a placeholder\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setLoading(true);\n    setInput('');\n\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\n      // Create the conversation context by combining all previous messages\n      const conversationContext = messages.map((msg) => `${msg.sender}: ${msg.text}`).join('\\n');\n\n      const response = await fetch(`${API_URL}/api/chat`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: input,\n          context: conversationContext\n        }),\n      });\n\n      const data = await response.json();\n      const aiMessage = { text: data.message, sender: 'ai', timestamp: new Date().toLocaleTimeString() };\n      setMessages((prev) => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      const errorMessage = { text: 'Error connecting to the AI service.', sender: 'error', timestamp: new Date().toLocaleTimeString() };\n      setMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <MainContainer responsive style={{ height: '100%' }}>\n        <ChatContainer>\n          <MessageList typingIndicator={loading ? <TypingIndicator content=\"AI is typing...\" /> : null}>\n            {messages.map((msg, index) => (\n              <Message\n              key={index}\n              model={{\n                message: msg.text,\n                sentTime: msg.timestamp,\n                sender: msg.sender === 'user' ? 'You' : 'AI',\n                direction: msg.sender === 'user' ? 'outgoing' : 'incoming',\n                position: 'normal',\n              }}\n              avatarPosition={msg.sender === 'user' ? 'trailing' : 'leading'} // Position avatar to the right for user and left for AI\n            >\n              <Avatar\n                src={msg.profilePicture}\n                name={msg.sender === 'user' ? 'You' : 'AI'}\n                size=\"40\" // Set avatar size\n              />\n            </Message>\n            ))}\n            <div ref={messageEndRef} />\n          </MessageList>\n          <MessageInput\n            placeholder=\"Type your message here...\"\n            value={input}\n            onChange={(value) => setInput(value)}\n            onSend={sendMessage}\n            attachButton={false}\n            sendButton={!loading}  // Disable send button when loading\n            disabled={loading}     // Disable input when loading\n          />\n        </ChatContainer>\n      </MainContainer>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}